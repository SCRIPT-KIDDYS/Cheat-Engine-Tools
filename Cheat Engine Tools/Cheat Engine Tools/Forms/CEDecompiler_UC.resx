<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAARQAAACqCAYAAABsx7DIAAAABGdBTUEAALGPC/xhBQAAABl0RVh0U29m
        dHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAABcUSURBVHhe7d151HVlWcdx8VWmUJDZRIZyQWgopQtZ
        SYEsFIjRSAERBzB4EQecljSQqCBYKmgqZGppIqNASMmgKCqkYqGiZupSUZLACUxlUHn7/V6f/ayb83zP
        855z9n3v4ezrj4/Ctadznus6F3u89wNWrVo1kb++bvfQb+vIDrK3PFteJW+Sc+UKuV6+JN+RO+QnsmqM
        X4rn+YF8Uz4vH5fL5N3yenmRHCpPkq1kLaHPFXqAegLBIKGNhE56hOwjL5d/kk/ILUKNoUn3yFfl3+RM
        OVp2lYcIfY/QIdQTCAYJbSS07jflYDlNPirea6Afc9d9Sy6QV8husr7Q9w0toZ5AMEhoI6FxPnR4jnjP
        42ahH+e0fixfk8/JNXKpeP3/IN6TqJye/PNbxPN8QC4X7wX5sMeHS3cLbWcaPqS6QbxNH6JFg2kZ9QSC
        QUIbCcU9WJ4s/hF/XejHt5xfiZf7sLxDvAfwJ+JDjW1kXaHt1rWR/I7sIW6AJ8v75FPyv0KfdTn3yrXi
        z7+90DZDQdQTCAYJbSQU4ZOn/tH7v/7ee6AfGPHhzlXi/6ofKTtLqYZR16biZuMTt38v/yHeK6HvRXwu
        5g3ye0LrD5lRTyAYJLSRkM0DxXsi75JJz4P8t5wtbh6+etP3qyjria8IvVR82PUjoe896r/kL2U7ofWG
        DKgnEAwS2kiobXM5UXxSkn4sqe/Le8UNxOdSaH3zxE32CeLDnKvlF0J/l9RHxHt3DxJaZ5gR9QSCQUIb
        CTN7oviQxucG6IdR8V7I34j/y71CaF1DsaEcJv673Sn096r8j/i8zWZC6wpTop5AMEhoI2FqT5WPCf0I
        Kt8T33D2+0LrCL8+z3SIXCy+v4X+jnaXvE22FlpPmBD1BIJBQhsJE9tffOKRit68O3+RPEW8q0/rCMxX
        lI6TLwj9bc0nfH2ZO86zzIh6AsEgoY2ENfKhje/RoCI338H6avENarR8mI4PDd8v4w4lHT9DfJWJlg9j
        UE8gGCS0kTCWd7EvFCpq87mRo2RtoeVDPX784M3yU6G/v6+k+Vkm3+dDy4cR1BMIBgltJCzhqwu+KjGu
        kL8oT5c4rGmG90R8cnbcg45+GNJ7NbRsSFBPIBgktJFwP77E6dvPqXB9S7rvGI1G0g43lrfKuEMhP2bg
        q0i0bBDqCQSDhDYSVvPl3L8Quk/CeyretfZNW7RsaNZvi09+j+bJvi2xtzIG9QSCQUIbCbs/UvyMCRWo
        7/b0dFoutOuPxQ1kNGd+9uk1EjfGjaCeQDBIaCMDt6f8UEaL0veRHCS0TOgOP8HsmwbdREZz6HuFNhFa
        bpCoJxAMEtrIgL1Q6GG2SyQuSfbLHwkNBeHHIXYSWmZwqCcQDBLayAD5fMk7ZbT4fibHCC0Tus83x50n
        o3n1ObD9hJYZFOoJBIOENjIw3kX2eZHRovN/3TxUAC0T+sVPOo8eAvnfnyc0/2BQTyAYJLSRAXEz8Whm
        aaGZ74L1E8O0TOgnP/5A49D49n6afxCoJxAMEtrIgOwiP5e0wDyUQNzpOp88KpxH80/z/WkZ7NUf6gkE
        g4Q2MjC+qlPdGOWngeO1EPPt4XKTON/+/0GfbKeeQDBIaCMDdKCcMhIL88vjqfhk7eDHVRntB+NgkNBG
        QgjDQD2BYJDQRkIIw0A9gWBQK9hRfBfhZ8WDBXtXP91AerLKl1LTaX4lZTXNj4mn0/zkZ7psernVo6Cn
        006QdNl02rhtevQu31Idl3FDV/lczCvFVw1vkzUNA9oV94nvDPf7m9wbdqTesSRgmnl0mEK/Czf9o6TT
        utRQKvHkaOgaP2nuB0XHDW3RN24wHgXvYWnvuF8jqWim0R/3cyX946TTutZQfLkvneYR4t8j8fa50Ba/
        H+lfJK3heeG3Tm5X9Y4lzaSimaof6XflCEn/QB73o+Ih9dJpfrdMNe2TC7HKSkmX9ftkqmnVeCKVWbfp
        F0dVcQ9m/Bnx9/C7c9NlQmjK+ZL+CCu3S1rXXTfudS9+O+WG7htV8/BrKv3A21pJQ/HNPYudR//cR240
        6RcfPXQLoTTXXFqD5vcHebxhmr+Tkj7gV9i+XUa/03s83TP4HbQ+HnLwQ7JptXBK8T7ynkz6pd1J44a0
        0BSPWevR+tIa9H+8ezdyH/SDQ6XqG+Z/3tETfMY2/cInjy68sII+cuKul1vlJInnbkKT/KRy+tvyVdNe
        vrBtTE/wHePp9/tbB/8zCXiMj43HLNxXW0o8cxPa4JH30x9cbwfeGtMTNpZ06NMbHfS7cn07uV/xuPo4
        iGhaCGE6V0raUHo7tjD1BNM0PzRZfb97cCbilYYQprLcLRS9Qj3BNM23cFTfkWciXmmP+X04voPW/LAX
        zRNCbtFQxvFKe8zJrL60k0zzhJDb8BqK/ie9ceUMWsg0rc+ioYQ2DLKhLP6LXEoLmab1WRzyhDZEQ6GF
        TNNCCNMZZEPxF62cQwuZpoUQpjO8hkIzEa80hDCVaCjjeKU9dqJ46AQbHYohhFKioYzjlfaYk1l9aSeZ
        5gkht0GeQ/FARpUDaCHTtFr+8JAXtEbbv19DoXk6biN5qVwjP5JV8iv5jlwkz5J1hZYN4hpswSAbyuK/
        SLGrPJTkpmj7fW0oD5SXy/+Jm8hybpcXyQqhdQ2aa7AF0VBoIdO0WijJTdH2dxMPMWk70zwdtL58WKh5
        LOfT8ltC6xws12ALoqHQQqZptSwk9qHyaNlG1lqIhaXWEe9JUcOYhA+LdhNa9yBRTTZgkA3FVz0qe9JC
        pmkzU0L3l2vFx/1V0f9QzpJHyZICGLh3SNogZvFz2VNo/YNDddmA4TUUmol4pdNSIh8iFwgVfOUXcroU
        O6moz7K1bLtgS5qnQ7xnQX+nWURTWeB6bEE0lHG80mkoiVvITUKFTj4vRY799XmczOpLd/2k7JVCf59Z
        RVMR12QLoqGM45VOSgncUKZpJpXvy5NkSUHUoc/Ul4byCLlP6G9Tx0/kiULbHATXZQvipCwtZJo2MSXw
        QqHCnsTd8gxZUhSz0mdqo6FsLSeJt3er/EBulLfJE4SWOULob5LDnTLYpuK6bEE0FFrING0iSp53r6mg
        p+GTt/5xLSmMWehz+dUFfm2inUjzZLSevEnuFfpulY/IDpIu+1qheXMZbFNxbbYgGgotZJo2ESXvg0LF
        PC03laNlSXF02FYyzaHeXXKoVMu/Rmi+nO6QnST93HOParUBg2wo/tKVU0YXqGjaRJQ8nwehQp7VcbKk
        QDrIzeRmoe+wHDfOo8Tr8F2xNE9uztGgmgrVagOG11BoJuKVTkLJowKuy8+qLCmSDvElb58foc8+ieoQ
        zyekaXoJg2oqVKsNiIYyjlc6CSXvHqECrqPWORV9rnPEX9xOoXlqeqPQ556Gv+OR8q0kVpqbyvZC32mu
        uDZbEA1lHK90Ekre54SKt66Zm4o+l5NZfencV3m2Fd+cR595Wv6OV43ESrtF5v5uZddmC4bXUPQ/1dUP
        ezEtZJo2ESWv5InFmZqKPtc0DcXPG/lQwDZYiC3nNKHPOivfh1LiXpTlzH1TcW22YJANZfFfJMdVHt9/
        8Uuhws3BTeWZsqRoxtHnWlND8TABh8t1kv6Y/T28x7CXjC5T+Yqkn6+v3FTm9ill12YLoqHQQqZpE1MC
        czzcthzf43GgLCkcos+0oWy0YHSvY0e5QWg7qQ/I6LJ+KrjpvYmSviG+WpV+x7ngumxBNBRayDRtYkrg
        xuIBf6hoc5mqqYzxNPmZ0PrJF2QzqZb33hjN12dz2VSoThswyIZSPYVrm9NCpmlTURL3EyrYnOo0leeJ
        D59ovcvxjWtVU3HjpHn6bu6aCtVoA4bXUGgm4pVOS4k8Wahgc1pjU9Fn2U8OXuDhAQ6RWZpJJW0qHteF
        5um7L0u6N9ZrrscWREMZxyudlhLpUdnWNB5KDm4q+8iSQjJ9Fidz9Rd+2SV7f1axaQ5zxqmayoeS2LxJ
        G2evVTXZsEEe8uyc2I4WMk2biZLph+U8WjsVbE5jx/3Q51hsKPuuPMoPyNHys/AP7viR2LyZi6ZS1WPD
        4qQsLWSaNjMl1FdHPiNUsDlhU9FnWN1Qjv/n/WmZunyidpZnePrEjxV4jJv7/V37JK3HBkVDoYVM02pR
        Ul2QrTQVbf84OWGfY472f21pmbpy3SnbZc5db5tKWosNioZCC5mm1bKQWBdknYfoJjXu8Mcjl9H8YTK9
        bSpUkw0YZEM5M3E0LWSaVkuSXB+Pl9pTSLmp7CrVdh8uNF+Yjt/743cGpTntPKrJBgyvodBMxCutYyTB
        TTWVdIQyj9dK84Tp+SR7r5oK1WQDoqGM45XWAUlurKm8+IJ9b/2rT+xxx+7POI6mh9n0qqlQTTYgGso4
        XmkdlGRppKnscfjK+064aJ9VB7zkOTg9zMxNpRcvaaeabMAgz6F8PnEGLWSaVgsleYFv8fat3lSw2Tz5
        8JWrDj35cJwWarlM1hbKbWdQTTZgkA1l8V+k9FWecRppKnscttK328/T08Fd0fmmQjXZgGgotJBpWi2U
        5BGNNJVQTKebCtVkAwbZUH4h35Cr5UW0kGlaLZRkEE2l386VFUK5bRXVZAMG2VBW0IyjNF8tlOQxthGP
        HkYFG7rvHOlcU6GabMBVsvhjk3WE5us86gmmaddJ9f3uxZmIV1oHJXkZHt80mkp/da6pUE024K2SNpR9
        hebrvDE9wSMh3iPV9/vi6AybywFpLJlWCyV5DaKp9Nu7xcNXUG4bRzXZgIMkbSiflLWE5u20MT3hdZJ+
        vzOrCSvkePmx3Ct7w8K1UJInEE2l386STjQVqskG+BDnVkl/dKcLzdtp0A88aNmvJP1uj6sm+kumE3yi
        9jEjK6iFkjwhN5XbhAo2dF8nmgrVZENWSvrbsktkB6H5OynpA5vIqTLaTM7z9GqmzeTmZOI1yQoeIT5b
        XflTWdzQQqxyykKs4gcOq2mXjyT4uck0W3wvjP7Zgz0tTnv+2Qe/TPHc70wOzXmrLOa+DaqjtvgQ518l
        /fFVfHX1Wkl/B13mm19HG4l9VzZdbCgLjWNHuUV8yLNjEn+8pAufIOkfLJ3mS0jpNH+Iaprf+p8m+ORk
        mu2cTNtjZNoJivvFW9FU+ut0Wcx/01RDbdpArpG0pueFm8kOVb9YbCgLzWMLOWIktpekK2iroXhaNJV+
        e4Us1kCTVENte7C8Xvwf7LS2+8yHbluk/WLxH8bRAk9PVmBtNhTbac9nHUvFGvrhMFmsg6aohrpia/HV
        kRvkbknrvOt8uPN1OVt2oX6xJFAKJbmGXSTnYNOhOXfJE4TyWgzVZMgPgyVQkmvywEnRVPrpu7K5UF6L
        oJoM+WGwBEpyBtFU+usKaexyMtVkyA+DJVCSM4mm0l+vFMppdlSTIT8MlkBJzsivF/Wg1FS0obvukR2E
        cpoV1WTID4MlUJIz82szoqn0z8ek+KEP1WTID4MlUJILiKbST0cK5TMbqsmQHwZLoCQXEk2lf74jRUd7
        o5oM+WGwBEpyQW4q9woVb+im5wvlMguqyZAfBkugJBd2oERT6Q+/dJ7ymAXVZMgPgyVQkhsQTaVf/KwW
        5bE2qsmQHwZLoCQ3JJpKf7xKKIe1UU2G/DBYAiW5QdFU+uFiofzVRjUZ8sNgCZTkhh0uftEXFXLohm8K
        5a42qsmQHwZLoCS34AiJptJtGwnlrhaqyZAfBkugJLckmkq3+ZI/5a0WqsmQHwZLoCS3KJpKd3n8YMpZ
        LVSTIT8MlkBJbtnzhAo6tOv9QvmqhWoy5IfBEijJHXCcUFGH9nxZKFe1UE2G/DBYAiW5I6KpdIsPRdcT
        ytXMqCZDfhgsgZLcIdFUumVXoTzNjGoy5IfBEijJHXO8UHGH5q0UytHMqCZDfhgsgZLcQScKFXho1juF
        8jMzqsmQHwZLoCR3VDSV9t0glJuZUU2G/DBYAiW5w6KptMtjzWZ98phqMuSHwRIoyR0XTaVdfuVstqZC
        NRnyw2AJlOQeOFWo2EMzviePEsrNVKgmQ34YLIGS3BOnCxV7aMYtUrupUE2G/DBYAiW5R6KptKt2U6Ga
        DPlhsARKcs9EU2lXraZCNRnyw2AJlOQeeptQsYdmuKlsJ5SbZVFNhvwwWAIluYf8hrv3CRV7aMY3ZCuh
        /IxFNRnyw2AJlOSe8gup/PpMKvbQjKmbCtVkyA+DJVCSe2wT8dvuqNhDM6ZqKlSTIT8MlkBJ7rndJEZ9
        a9fETYVqMuSHwRIoyXPgLUKFHprzNdlMKD+LqCZDfhgsgZI8Bx4mdwoVemjOTbJsU6GaDPlhsARK8pzw
        o/ZU5KFZyzYVqsmQHwZLoCRn4He4PE72kafJM+Vg2VeeKD6+fqDQsrm8VKjAQ/PGNhWqyZAfBkugJM/A
        DeJYuUgmvcriV5D6OPtKebMcJW42GwhtY1p+fSZtN7QDmwrVZMgPgyWMJngK3sPw3sdVcp9QEc3q23KZ
        nCZ+rcbu8kiZdK/mqZL7M4X6PEDThrKYK6rJkB8GS0iTO4VD5CtCRVOSB/j5kpwvfy77yfbiIvWJ2MfK
        6+RuoeVD+z4ji02FajLkh8ESqsRO6Hfl40KFEsKkFpsK1WTID4MlOKkTWCEeKc17CFQgIUxrdVOhmgz5
        YbAEJXVNfkMuFSqKEOpwU9mA6jLkhcESlNDlrCufFCqGEHK4muoy5IXBEpTQ5bxdqAhCyMHPXB1BdRny
        wmAJSug4O0hceg2lRDNpEAZLUFLHOUmoEEKoa3UzEazJkB8GS3BSx7hcqBhCqOvZsrrOqCZDfhgsoUos
        uF6oGEKo4zhZrDOqyZAfBktIkzviCqGCCGFW92smRjUZ8sNgCaMJTsTj/yGnJc3EqCZDfhgsgZK8wA/l
        UWGEMC1sJkY1GfLDYAmU5AV+2O6nQgUSwqQ8Lg3V12pUkyE/DJZASU74iV4qkhAm4ee/qK4WUU2G/DBY
        AiU54RdovVbiocAwrTU2E6OaDPlhsARKMvD7bjyE4wvkJeL7CDyc4+NlW/GQj+Z5/Vi653fcI7B5uReK
        Xxd6rfxYqADD/JiomRjVZMgPgyVQkhvwaHGT+aDEeZr5MnEzMarJkB8GS6AkN2w98Qhw50kcWvXbqUI5
        HotqMuSHwRIoyS3aVF4l3xIq2NBdpwvldFlUkyE/DJZASe6AB8lzxa+0pOIN3TJTMzGqyZAfBkugJHeI
        G8vREi9A766Zm4lRTYb8MFgCJbmD1hbfbenXa1BRh3a8QShfE6OaDPlhsARKcod5j+Uw+bRQgYfmnCW+
        T4nyNDGqyZAfBkugJPfETvJ38n2hgg/lZGkmRjUZ8sNgCZTknnmw+B3K/yjRXMrL1kyMajLkh8ESKMk9
        5leV/oH4cYFPyS+FfhRhNlmbiVFNhvwwWAIleY74xet+L/Ir5UK5WeiHEtbsXZK1mRjVZMgPgyVQkufc
        FvIUebH4+aJr5BahH1H4tXPEb4+kv2ctVJMhPwyWQEkeKO/N+Bkjn485RvzS9ffKVXKT3CZDfK1IsWZi
        VJMhPwyWQEkOY/mHtaU8VvYSX8I+Xl4t3ts5V66WG8V7PXcJ/Uj7omgzMarJkB8GS6Akh6zWl+1kVzlI
        jhW/88gnOP2qki/KHUI/6DYVbyZGNRnyw2AJlOTQiofKY8RNxw9I+jL4v0sbzeZiKd5MjGoy5IfBEijJ
        oXMeLgeIhwfwOZ2STeYy8aMO9Dmyo5oM+WGwBEpy6DxfvvW7p/9MzpdcN/Q12kyMajLkh8ESKMmhd6ob
        +k6Trwo1izVpvJkY1WTID4MlUJJD73ms3zfK7ULNY1QrzcSoJkN+GCyBkhzmhpuEh9f0zXvUSMzT1hFa
        vjiqyZAfBkugJIe55L0Wj9ub3pznZuLL2jR/I6gmQ34YLIGSHOaa7wb2c00flVabiVFNhtxWPeD/AQwE
        QWY7UNO+AAAAAElFTkSuQmCC
</value>
  </data>
</root>